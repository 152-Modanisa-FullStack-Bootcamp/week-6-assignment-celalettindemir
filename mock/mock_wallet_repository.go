// Code generated by MockGen. DO NOT EDIT.
// Source: repository/wallet_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// AddWallet mocks base method.
func (m *MockWalletRepository) AddWallet(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWallet", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWallet indicates an expected call of AddWallet.
func (mr *MockWalletRepositoryMockRecorder) AddWallet(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWallet", reflect.TypeOf((*MockWalletRepository)(nil).AddWallet), username)
}

// CashOperation mocks base method.
func (m *MockWalletRepository) CashOperation(username string, Amount int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CashOperation", username, Amount)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CashOperation indicates an expected call of CashOperation.
func (mr *MockWalletRepositoryMockRecorder) CashOperation(username, Amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CashOperation", reflect.TypeOf((*MockWalletRepository)(nil).CashOperation), username, Amount)
}

// FindAllWallet mocks base method.
func (m *MockWalletRepository) FindAllWallet() (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWallet")
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWallet indicates an expected call of FindAllWallet.
func (mr *MockWalletRepositoryMockRecorder) FindAllWallet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWallet", reflect.TypeOf((*MockWalletRepository)(nil).FindAllWallet))
}

// GetWalletByUserName mocks base method.
func (m *MockWalletRepository) GetWalletByUserName(username string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserName", username)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserName indicates an expected call of GetWalletByUserName.
func (mr *MockWalletRepositoryMockRecorder) GetWalletByUserName(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserName", reflect.TypeOf((*MockWalletRepository)(nil).GetWalletByUserName), username)
}
