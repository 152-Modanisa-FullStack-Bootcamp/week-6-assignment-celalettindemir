// Code generated by MockGen. DO NOT EDIT.
// Source: controllers/wallet_controller.go

// Package mock is a generated GoMock package.
package mock

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWalletController is a mock of WalletController interface.
type MockWalletController struct {
	ctrl     *gomock.Controller
	recorder *MockWalletControllerMockRecorder
}

// MockWalletControllerMockRecorder is the mock recorder for MockWalletController.
type MockWalletControllerMockRecorder struct {
	mock *MockWalletController
}

// NewMockWalletController creates a new mock instance.
func NewMockWalletController(ctrl *gomock.Controller) *MockWalletController {
	mock := &MockWalletController{ctrl: ctrl}
	mock.recorder = &MockWalletControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletController) EXPECT() *MockWalletControllerMockRecorder {
	return m.recorder
}

// GetAllWallets mocks base method.
func (m *MockWalletController) GetAllWallets(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllWallets", w, r)
}

// GetAllWallets indicates an expected call of GetAllWallets.
func (mr *MockWalletControllerMockRecorder) GetAllWallets(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllWallets", reflect.TypeOf((*MockWalletController)(nil).GetAllWallets), w, r)
}

// GetWalletByUsername mocks base method.
func (m *MockWalletController) GetWalletByUsername(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetWalletByUsername", w, r)
}

// GetWalletByUsername indicates an expected call of GetWalletByUsername.
func (mr *MockWalletControllerMockRecorder) GetWalletByUsername(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUsername", reflect.TypeOf((*MockWalletController)(nil).GetWalletByUsername), w, r)
}

// PostWallet mocks base method.
func (m *MockWalletController) PostWallet(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PostWallet", w, r)
}

// PostWallet indicates an expected call of PostWallet.
func (mr *MockWalletControllerMockRecorder) PostWallet(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostWallet", reflect.TypeOf((*MockWalletController)(nil).PostWallet), w, r)
}

// PutWallet mocks base method.
func (m *MockWalletController) PutWallet(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutWallet", w, r)
}

// PutWallet indicates an expected call of PutWallet.
func (mr *MockWalletControllerMockRecorder) PutWallet(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutWallet", reflect.TypeOf((*MockWalletController)(nil).PutWallet), w, r)
}
